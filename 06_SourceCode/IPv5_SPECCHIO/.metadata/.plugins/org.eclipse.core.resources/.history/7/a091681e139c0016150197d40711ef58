package ch.specchio.controller;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import ch.specchio.client.SPECCHIOClient;
import ch.specchio.client.SPECCHIOClientFactory;
import ch.specchio.client.SPECCHIOServerDescriptor;
import ch.specchio.queries.EAVQueryConditionObject;
import ch.specchio.queries.Query;
import ch.specchio.spaces.Space;
import ch.specchio.types.MatlabAdaptedArrayList;
import ch.specchio.types.attribute;


@SuppressWarnings("serial")
public class MainServlet extends HttpServlet {

	
	private void handleRequest(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		
		System.out.println(req.getParameter("text"));
		
		// ---
		
		SPECCHIOClientFactory cf = SPECCHIOClientFactory.getInstance();
		List<SPECCHIOServerDescriptor> db_descriptor_list = cf.getAllServerDescriptors();
		SPECCHIOClient specchio_client = cf.createClient(db_descriptor_list.get(0));
		
		Query query = new Query();
		
		attribute attr = specchio_client.getAttributesNameHash().get("Altitude");
		
		EAVQueryConditionObject cond = new EAVQueryConditionObject(attr);
		cond.setValue("50.0");
		cond.setOperator(">=");
		query.add_condition(cond);
		ArrayList<Integer> ids = specchio_client.getSpectrumIdsMatchingQuery(query);
		System.out.println("hello : " + ids.size());
		
		cond = new EAVQueryConditionObject(attr);
		cond.setValue("55.0");
		cond.setOperator("<");
		query.add_condition(cond);
		ids = specchio_client.getSpectrumIdsMatchingQuery(query);
		System.out.println("hello : " + ids.size());
		
		Space[] spaces = specchio_client.getSpaces(ids, "Acquisition Time");
		System.out.println(spaces.length);
		Space space = spaces[0];
		ids = space.getSpectrumIds(); // get them sorted by 'Acquisition Time'
		space = specchio_client.loadSpace(space); 
		
		double[][] vectors = space.getVectorsAsArray();
		for(int i = 0; i < vectors.length; i++){
			System.out.println(vectors[i].length);
			for(int j = 0; j < vectors[i].length; j++){
				//System.out.println("i="+i+" -> "+vectors[i][j]);
			}
		}
		
		//wvl = space.getAverageWavelengths();
		
		MatlabAdaptedArrayList<Object> filenames_ = specchio_client.getMetaparameterValues(ids, "File Name");
		for(Object o : filenames_){
			System.out.println("filename: " +o.toString());
		}
		
		
		for(Object o : filenames_){
			System.out.println("filename: " +o.toString());
		}
		req.setAttribute("filenames", filenames_);
		

		
		double[] lat = specchio_client.getMetaparameterValues(ids, "Latitude")
				.get_as_double_array();
		double[] lon = specchio_client.getMetaparameterValues(ids, "Longitude")
				.get_as_double_array();		
		
		System.out.println(lat.length + " " + lon.length);
		
		
		
		RequestDispatcher rd = req.getRequestDispatcher("/test.jsp");
		rd.forward(req, resp);
		
//		String nextJSP = req.getContextPath() + "/test.jsp";
//		RequestDispatcher dispatcher = getServletContext().getRequestDispatcher(nextJSP);
//		dispatcher.forward(req,resp);
	}
	
	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		handleRequest(req, resp);
	}
	
	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		handleRequest(req, resp);
	}
	
}
